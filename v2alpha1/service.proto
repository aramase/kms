/*
Copyright 2022 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// To regenerate service.pb.go run hack/update-generated-kms.sh
syntax = "proto3";

package v2alpha1;

// This service defines the public APIs for remote KMS provider.
service KeyManagementService {
    // this API is meant to be polled (or maybe we should make it stream?)
    rpc Status(StatusRequest) returns (StatusResponse) {}

    // Execute decryption operation in KMS provider.
    rpc Decrypt(DecryptRequest) returns (DecryptResponse) {}
    // Execute encryption operation in KMS provider.
    rpc Encrypt(EncryptRequest) returns (EncryptResponse) {}
}

message StatusRequest {}

message StatusResponse {
    // Version of the KMS plugin API.
    string version = 1;

    // anything other than "ok" is failing healthz
    string healthz = 2;

    // the current write key, triggers rotation via storage version hash
    // https://github.com/kubernetes/kubernetes/blob/1ea07d482a5ec15afac5ea837585174579fc0f57/staging/src/k8s.io/apiserver/pkg/endpoints/installer.go#L407
    string currentKeyID = 3;
}

message DecryptRequest {
    // Version of the KMS plugin API.
    string version = 1;
    // The data to be decrypted.
    bytes cipher = 2;
    // UID is a unique identifier for the request.
    string uid = 3;
    // The keyID that was provided to the apiserver during encryption.
    // This represent the KMS KEK that was used to encrypt the data.
    string observedKeyID = 4;
    // Additional metadata that was sent by the KMS plugin during encryption.
    map<string, string> metadata = 5;
}

message DecryptResponse {
    // The decrypted data.
    bytes plain = 1;
    // The KMS key ID used to decrypt the data.
    string currentKeyID = 2;
    // Additional metadata that was sent by the KMS plugin.
    map<string, string> metadata = 3;
}

message EncryptRequest {
    // Version of the KMS plugin API.
    string version = 1;
    // The data to be encrypted.
    bytes plain = 2;
    // UID is a unique identifier for the request.
    string uid = 3;
}

message EncryptResponse {
    // The encrypted data.
    bytes cipher = 1;
    // The KMS key ID used to encrypt the local KEK.
    // This can be used for rotation.
    string currentKeyID = 2;
    // Additional metadata to be stored with the encrypted data.
    // This metadata can contain the encrypted local KEK that was used to encrypt the DEK.
    map<string, string> metadata = 3;
}
